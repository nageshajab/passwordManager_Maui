@page "/registration"

@using Newtonsoft.Json
@using PasswordManagerMaui.Models
@using System.Text

@inject NavigationManager navManager
@inject HttpClient _client

<h3>Registration</h3>

<EditForm Model="@registrationModel" OnValidSubmit="Submit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    
    <div class="form-group">
        <label>First Name</label>
        <input class="form-control" @bind-value=registrationModel.FirstName placeholder="Enter first name" />
        <ValidationMessage For="@(()=>registrationModel.FirstName)" />
    </div>
    <div class="form-group">
        <label>Last Name</label>
        <input class="form-control" placeholder="Enter Last name" @bind-value=registrationModel.LastName />
        <ValidationMessage For="@(()=>registrationModel.LastName)" />
    </div>

    <div class="mt-2 form-group">
        <label>Gender</label>
        <div class="d-flex flex-row">
            <div class="col-4 d-flex justify-content-between">
                <div class="form-check">
                    <input @onchange="@(()=>registrationModel.Gender="male")" class="form-check-input" type="radio" name="flexRadioDefault" />
                    <label class="form-check-label" for="flexRadioDefault1">
                        Male
                    </label>
                </div>
                <div class="form-check">
                    <input @onchange="@(()=>registrationModel.Gender="female")" class="form-check-input" type="radio" name="flexRadioDefault" />
                    <label class="form-check-label" for="flexRadioDefault2">
                        Female
                    </label>
                </div>
            </div>
            <ValidationMessage For="@(()=>registrationModel.Gender)" />
        </div>
    </div>

    <div class="form-group">
        <label>Email address</label>
        <input type="email" class="form-control" placeholder="Enter email" @bind-value="registrationModel.Email" />
        <ValidationMessage For="@(()=>registrationModel.Email)" />
    </div>
    <div class="mt-2 form-group">
        <label>Password</label>
        <input type="password" class="form-control" placeholder="Password" @bind-value="registrationModel.Password" />
        <ValidationMessage For="@(()=>registrationModel.Password)" />
    </div>
    <div class="mt-2 form-group">
        <label>Confirm Password</label>
        <input type="password" class="form-control" placeholder="Password" @bind-value="registrationModel.PasswordConfirm" />
        <ValidationMessage For="@(()=>registrationModel.PasswordConfirm)" />
    </div>

    <div class="mt-2 text-end">
        <NavLink class="nav-link" href="/">
            <span>Already have account? Login</span>
        </NavLink>
    </div>

    <div class="mt-2 text-center">
        <button class="btn btn-primary" type="submit">
            <span class="@_spinnerclass" role="status" aria-hidden="true"></span>
            Register</button>
    </div>
</EditForm>

@code {
    RegistrationModel registrationModel = new();
    private string _spinnerclass = "";

    private async void Submit()
    {
        _spinnerclass = "spinner-border spinner-border-sm";

        var url = $"Authentication/RegisterUser";

        var serialized = JsonConvert.SerializeObject(registrationModel);

        StringContent stringContent = new StringContent(serialized, Encoding.UTF8, "application/json");

        var response = await _client.PostAsync(url, stringContent);

        if (response.IsSuccessStatusCode)
        {
            await App.Current.MainPage.DisplayAlert("Success", "User Registered", "OK");
        }
        else
        {
            await App.Current.MainPage.DisplayAlert("Oops", "something went wrong", "OK");
        }

        _spinnerclass = "";
        this.StateHasChanged();
    }    
}
