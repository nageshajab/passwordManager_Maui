@page "/aePassword/{Id}"
@page "/aePassword"

@using Newtonsoft.Json
@using PasswordManagerMaui.Models
@using System.Text

@inject NavigationManager navManager
@inject HttpClient _client

<h3>Add/ Edit Password</h3>

<EditForm Model="@password" OnValidSubmit="Submit">
    <DataAnnotationsValidator></DataAnnotationsValidator>

    <div class="form-group">
        <label>Title</label>
        <input class="form-control" @bind-value=password.Title placeholder="Enter Title" />
        <ValidationMessage For="@(()=>password.Title)" />
    </div>
    <div class="form-group">
        <label>User name</label>
        <input class="form-control" placeholder="Enter user name" @bind-value=password.UserName/>
        <ValidationMessage For="@(()=>password.UserName)" />
    </div>
        

    <div class="form-group">
        <label>Password</label>
        <input type="password" class="form-control" placeholder="Enter Password" @bind-value="password.Password1" />
        <ValidationMessage For="@(()=>password.Password1)" />
    </div>
    <div class="mt-2 text-center">
        <button class="btn btn-primary" type="submit">
            <span class="@_spinnerclass" role="status" aria-hidden="true"></span>
            @buttonText
        </button>
    </div>
</EditForm>
<button class="btn btn-primary" type="submit" @onclick="back">Back</button>

@code {
    [Parameter]
    public string Id { get; set; }

    Password password = new();
    private string _spinnerclass = "";
    private string buttonText = "Add";
    private string url = "";

    private void back()
    {
        navManager.NavigateTo("/dashboard");
    }

    public enum Mode{
        Add,
        Edit
    }
    Mode mode;

    protected override async Task OnInitializedAsync()
    {
        mode = string.IsNullOrEmpty(Id) ? Mode.Add : Mode.Edit;
        if (string.IsNullOrEmpty(Id))
        {
            buttonText = "Add";
        }
        else
        {
            buttonText = "Edit";
        }
    }

    private async void Submit()
    {
        _spinnerclass = "spinner-border spinner-border-sm";

        if (mode == Mode.Edit)
        {
            url = $"Password/Edit";
            password.Id = Id;
        }
        else
        {
            url = $"Password/Create";
            password.Id = "";
        }
        
        var serialized = JsonConvert.SerializeObject(password);

        StringContent stringContent = new StringContent(serialized, Encoding.UTF8, "application/json");

        try
        {
            var response = await _client.PostAsync(url, stringContent);

            if (response.IsSuccessStatusCode)
            {
                await App.Current.MainPage.DisplayAlert("Success", "Password added", "OK");
                navManager.NavigateTo("/dashboard");
            }
            else
            {

                await App.Current.MainPage.DisplayAlert("Oops", "something went wrong", "OK");
            }
       }
        catch (Exception ex)
        {
            
            throw;
        }
        _spinnerclass = "";
        this.StateHasChanged();
    }
}
